package FileSystemApp;

/**
 * FileSystemApp/FileSystemPOA.java . Generated by the IDL-to-Java compiler
 * (portable), version "3.2" from FileSystem.idl Thursday, November 10, 2016
 * 2:45:54 PM EST
 */

public abstract class FileSystemPOA extends org.omg.PortableServer.Servant
		implements FileSystemApp.FileSystemOperations, org.omg.CORBA.portable.InvokeHandler
{

	// Constructors

	private static java.util.Hashtable<String, Integer> _methods = new java.util.Hashtable<String, Integer>();
	static
	{
		_methods.put("shutdown", new java.lang.Integer(0));
		_methods.put("readFile", new java.lang.Integer(1));
		_methods.put("openReadFile", new java.lang.Integer(2));
		_methods.put("openWriteFile", new java.lang.Integer(3));
		_methods.put("deleteFile", new java.lang.Integer(4));
		_methods.put("closeFile", new java.lang.Integer(5));
		_methods.put("updateRecord", new java.lang.Integer(6));
		_methods.put("filesInSystem", new java.lang.Integer(7));
		_methods.put("filesOpenInSystem", new java.lang.Integer(8));
		_methods.put("isFileOpen", new java.lang.Integer(9));
		_methods.put("getFileTimeStamp", new java.lang.Integer(10));
	}

	/**
	 * @see org.omg.CORBA.portable.InvokeHandler#_invoke(java.lang.String, org.omg.CORBA.portable.InputStream, org.omg.CORBA.portable.ResponseHandler)
	 */
	@Override
	public org.omg.CORBA.portable.OutputStream _invoke(String $method, org.omg.CORBA.portable.InputStream in,
			org.omg.CORBA.portable.ResponseHandler $rh)
	{
		org.omg.CORBA.portable.OutputStream out = null;
		java.lang.Integer __method = _methods.get($method);
		if (__method == null)
			throw new org.omg.CORBA.BAD_OPERATION(0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

		switch (__method.intValue())
		{
		case 0: // FileSystemApp/FileSystem/shutdown
		{
			this.shutdown();
			out = $rh.createReply();
			break;
		}

		case 1: // FileSystemApp/FileSystem/readFile
		{
			String fileName = in.read_string();
			System.out.println("starting to read file. " + fileName);
			String $result = null;
			$result = this.readFile(fileName);
			out = $rh.createReply();
			out.write_string($result);
			break;
		}
		case 2: // FileSystemApp/FileSystem/openReadFile
		{
			String fileName = in.read_string();
			System.out.println("Opening file for read: "+fileName);
			boolean $result = false; 
			$result= this.openReadFile(fileName);
			out = $rh.createReply();
			out.write_boolean($result);
			break;
		}
		case 3: // FileSystemApp/FileSystem/openWriteFile
		{
			String fileName = in.read_string();
			System.out.println("Opening file for write: "+fileName);
			boolean $result = false; 
			$result= this.openWriteFile(fileName);
			out = $rh.createReply();
			out.write_boolean($result);
			break;
		}
		case 4: // FileSystemApp/FileSystem/deleteFile
		{
			String fileName = in.read_string();
			System.out.println("Deleting file: "+fileName);
			boolean $result = false; 
			$result= this.deleteFile(fileName);
			out = $rh.createReply();
			out.write_boolean($result);
			break;
		}
		case 5: // FileSystemApp/FileSystem/closeFile
		{
			String fileName = in.read_string();
			System.out.println("Closing file: "+fileName);
			boolean $result = false; 
			$result= this.closeFile(fileName);
			out = $rh.createReply();
			out.write_boolean($result);
			break;
		}
		case 6: // FileSystemApp/FileSystem/updateRecord
		{
			String fileName = in.read_string();
			int record = in.read_long();
			String modifications = in.read_string();
			System.out.println("Updating file: "+fileName);
			String $result = null; 
			$result= this.updateRecord(record, fileName, modifications);
			out = $rh.createReply();
			out.write_string($result);
			break;
		}
		case 7: // FileSystemApp/FileSystem/filesInSystem
		{
			String $result = null; 
			$result= this.filesInSystem();
			out = $rh.createReply();
			out.write_string($result);
			break;
		}
		case 8: // FileSystemApp/FileSystem/filesOpenInSystem
		{
			String $result = null; 
			$result= this.filesOpenInSystem();
			out = $rh.createReply();
			out.write_string($result);
			break;
		}
		case 9: // FileSystemApp/FileSystem/isFileOpen
		{
			String fileName = in.read_string();
			System.out.println("Checking if file is open: "+fileName);
			boolean $result = false; 
			$result= this.isFileOpen(fileName);
			out = $rh.createReply();
			out.write_boolean($result);
			break;
		}
		case 10: // FileSystemApp/FileSystem/shutdown
		{
			String fileTitle = in.read_string();
			System.out.println("Gettting file timestamp" + fileTitle);
			String $result = this.getFileTimeStamp(fileTitle);
			out = $rh.createReply();
			out.write_string($result);
			break;
		}
		default:
			throw new org.omg.CORBA.BAD_OPERATION(0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
		}

		return out;
	} // _invoke

	// Type-specific CORBA::Object operations
	private static String[] __ids =
	{ "IDL:FileSystemApp/FileSystem:1.0" };

	/**
	 * @see org.omg.PortableServer.Servant#_all_interfaces(org.omg.PortableServer.POA, byte[])
	 */
	@Override
	public String[] _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId)
	{
		return __ids.clone();
	}

	/**
	 * @return the FileSystem we are working with
	 */
	public FileSystem _this()
	{
		return FileSystemHelper.narrow(super._this_object());
	}

	/**
	 * @param orb our Corba object
	 * @return the FileSystem it contains
	 */
	public FileSystem _this(org.omg.CORBA.ORB orb)
	{
		return FileSystemHelper.narrow(super._this_object(orb));
	}

}
